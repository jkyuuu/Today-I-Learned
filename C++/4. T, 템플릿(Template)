[T, 템플릿(Template)]

1. 템플릿은?

 - 함수나 클래스를 개별적으로 다시 작성하지 않아도, 여러 자료형으로 사용할 수 있도록 만들어 놓은 틀.
 - 함수 템플릿(Function Template)과 클래스 템플릿(Class Template)으로 나뉨.

 ex) 비유를 들자면 펜 중에 5색펜과 같다. 펜이 한자루 인데 여러가지 색(자료형)을 우리가 그때그때 쓸 수 있는 것.
template은 여러개의 색(자료형)을 모아놓은 하나의 펜 케이스 그때그때 다른 색(자료형)을 눌러서 사용할 수 있다. 
즉, 그때마다 필요한 자료형(int, double, string 등)을 쓸 수 있다.


2.  함수 템플릿(Function Template)

 - 함수를 만들어 낼 때, 함수의 기능은 명확하지만, 자료형을 모호하게 두는 것.
 
 ex1) 함수 sum : 인자 2개를 받아서 더한 값을 return하는 함수일 경우
  * C++에서는 다형성의 오버로딩 특성에 의해 함수이름이 같아도 된다.
  * 그러므로, 템플릿이 없을 때는 각각 인자의 타입을 다르게 해서 만들면 된다.

  int sum(int a, int b){
    return a + b;
}
double sum(double a, double b){
    return a + b;
}


  * 하지만 T(template)을 사용하게 되면, 하나의 함수만 정의하면 된다.

template <typename T>
T sum(T a, T b){
    return a + b;
}


 ex2) 인자 2개 받을 때 두 개의 타입이 다른 경우

template <class T1, class T2>
void printAll(T1 a, T2 b){
   cout << "T1:" << a << endl;
   cout << "T2:" << b << endl;
   cout << "T1 + T2:" << a + b << endl;
}



3. main 함수에서 활용

 ex1)
template <typename T>
T sum(T a, T b){
    return a + b;
}
 
int main(void) {
    int a=1, b =2;
    
    double d1 = 2.2;
    double d2 = 3.3;
 
    string s1 = "initial ";
    string s2 = "bjk";
    
    cout << "int 합 : " << sum<int>(a, b) << endl;
    cout << "double 합 : " << sum<double>(d1, d2) << endl;
    cout << "string 합 : " << sum<string>(s1, s2) << endl;
    
    return 0;
}

 **** template 함수는 호출할때 명확하게 어떤 자료형을 쓸 건지 < > 안에 표시해주는게 좋다. *******



 ex2) template로 사용하는 변수가 2개 이상일 경우에는 함수이름 뒤에 <> 안에 명확하게 사용하지 않음. 그 때는 컴파일러가 스스로 자료형을 판단


template <class T1, class T2>
void printAll(T1 a, T2 b){
    cout << "T1 : " << a << endl;
    cout << "T2 : " << b << endl;
};
 
int main(void){
    string s1 = "initial" ;
    string s2 = "bjk." ;
 
    int num1 = 27;
    int num2 = 35;
 
    double d1 = 3.14;
    double d2 = 36.5;
 
    cout << "[string, string]" << endl;
    printAll(s1, s2);                   //printAll<string, string>(s1,s2);
 
    cout << "[string, int]" << endl;
    printAll(s1, num1);                 //printAll<string, int>(s1,num1);
 
    cout << "[int, int]" << endl;
    printAll(num1, num2);
 
    cout << "[int, double]" << endl;
    printAll(num1, d1);
 
    cout << "[double, double]" << endl;
    printAll(d1, d2);
 
    cout << "[double, string]" << endl;
    printAll(d1, s1);
 
    return 0;
}






출처 : https://blockdmask.tistory.com/43
